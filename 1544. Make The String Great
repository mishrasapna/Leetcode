/*
Given a string s of lower and upper case English letters.
A good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:
0 <= i <= s.length - 2
s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.
To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.
Return the string after making it good. The answer is guaranteed to be unique under the given constraints.
Notice that an empty string is also good.

Example 1:

Input: s = "abBAcC"
Output: ""
Explanation: We have many possible scenarios, and all lead to the same answer. For example:
"abBAcC" --> "aAcC" --> "cC" --> ""
"abBAcC" --> "abBA" --> "aA" --> ""
*/

class Solution {
    public String makeGood(String s) {
        
        // To keep a track of adjacent elements in the input
        Stack<Character> s1 = new Stack();
        
        for(char c : s.toCharArray()) {
            // To check if the top element in stack and current element are same
            // and differ in lower or upper case, then remove the top element from stack
            if( !s1.empty() && (Math.abs(c - s1.peek()) == 32))
                s1.pop();
            else
                s1.push(c);  
        }
        
        StringBuilder sb = new StringBuilder();
        for(char c: s1)
            sb.append(c);

        return sb.toString();             
        
    }
}
