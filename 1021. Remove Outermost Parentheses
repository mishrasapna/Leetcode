/*
A valid parentheses string is either empty (""), "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.

A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.
Given a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + ... + P_k, where P_i are primitive valid parentheses strings.
Return S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.

Example 1:

Input: "(()())(())"
Output: "()()()"
Explanation: 
The input string is "(()())(())", with primitive decomposition "(()())" + "(())".
After removing outer parentheses of each part, this is "()()" + "()" = "()()()".
*/

class Solution {
    public String removeOuterParentheses(String S) {
        
        StringBuilder result = new StringBuilder();
        int counter = 0;
        
        for(char c : S.toCharArray()){
            
            if(c == '(' && counter++ > 0) result.append(c);
            if(c == ')' && counter-- > 1) result.append(c);
            
        }
        return result.toString();
        
        
//	Alternate approach, using two StribgBuilder and less performant        
//         int counter=0;
//         StringBuilder sb1 = new StringBuilder();
//         StringBuilder sb2 = new StringBuilder();
//         for(char c : S.toCharArray()){
            
//             if(c == '('){
//                 counter++;
//                 sb1.append(c);                
//             }            
//             else{
//                 counter--;
//                 sb1.append(c);
//                 if(counter == 0){
//                     sb1.deleteCharAt(0).deleteCharAt(sb1.length()-1);
//                     sb2.append(sb1.toString());
//                     sb1.setLength(0);
//                 }
//             }
//         }
//         return sb2.toString();
    }
}