/*
Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.
We repeatedly make duplicate removals on S until we no longer can.
Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.

Example 1:

Input: "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move. 
The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".
*/

class Solution {
    public String removeDuplicates(String S) {
        
        StringBuilder sb = new StringBuilder();
        for (char c : S.toCharArray()){
            // To check if the last element inserted is same as the current, then remove it
            if(sb.length()>0 && c == sb.charAt(sb.length()-1)){
                sb.deleteCharAt(sb.length()-1);
            }
            // else insert the current element in result string
            else sb.append(c);
        }
        return sb.toString();
        
/*
Alternative approach using Stack, but performance decreases as the number of traversals increase.
*/
//         Stack<Character> stack = new Stack<>();
//         for(char c : S.toCharArray()){
            
//             // To check if the last element inserted is same as the current, then remove it
//             if(stack.size() != 0 && stack.peek() == c){
//                 stack.pop();
//             }
//             // else insert the current element in stack
//             else stack.push(c);
//         }
        
//         StringBuilder sb = new StringBuilder();
//         for(int i=stack.size(); i>0; i--){
//             sb.append(stack.pop());
//         }
//         return sb.reverse().toString();
        
    }
}