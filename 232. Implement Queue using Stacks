class MyQueue {

    /** Initialize your data structure here. */
    Stack<Integer> S1;
    Stack<Integer> S2;
    
    public MyQueue() {
        
         S1 = new Stack<>();
         S2 = new Stack<>();
        
        
    }
    private int front;
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        S1.push(x);     
    }
    
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
     if(S2.isEmpty()){
            while(!S1.isEmpty()){
                S2.push(S1.pop());
            }
        }
        return S2.pop();
    }
    
    /** Get the front element. */
    public int peek() {
       if(S2.isEmpty()){
            while(!S1.isEmpty()){
                S2.push(S1.pop());
            }
        }
        return S2.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return (S1.size() == 0 && S2.size()== 0);
        
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
