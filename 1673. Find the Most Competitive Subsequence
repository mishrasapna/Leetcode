/*
Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.
An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.
We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ,
subsequence a has a number less than the corresponding number in b.
For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.

Example:
Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.
*/


class Solution {
    public int[] mostCompetitive(int[] nums, int k) {
        
        // Result array to be returned
        int[] res = new int[k];
        // Stack to keep a track on the last element to compare
        Stack<Integer> stack = new Stack<>();
        
        for(int i=0; i<nums.length; i++){
            // Stack is not empty
            // Last element in stack is greater than current element being accessed, then remove it
            // If stack size + remaining input length > length of required subsequence
            while(!stack.isEmpty() && stack.peek() > nums[i] && stack.size() + nums.length-i > k){
                stack.pop();
            }
            // Add current element, if stack.size < length of required subsequence
            if(stack.size() < k) stack.push(nums[i]);
        }
        
        // Loop to write elements stored in stack to result array
        for(int i=k-1; i>=0; i--){
            res[i] = stack.pop();
        }
        return res;
    }
}