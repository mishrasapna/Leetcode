/*
Given a string s of '(' , ')' and lowercase English characters. 
Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

Example:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
*/

class Solution {
    public String minRemoveToMakeValid(String s) {
        
        // To track the matching of open and closed parenthesis
        Stack<Integer> stack = new Stack<>();
        // Result string
        StringBuilder sb = new StringBuilder(s);
        
        for(int i=0; i<s.length(); ++i){
            // Push the positive index of every open parenthesis encountered into stack
            if(sb.charAt(i)=='(') stack.push(i+1);
            else if(sb.charAt(i)==')') {
                // If top element in stack is positive(open parenthesis), then matching found for current element (closed parenthesis)
                // Pop from stack and skip the current element
                if(!stack.empty() && stack.peek() > 0) stack.pop();
                // Else if no matching found for closed parenthesis, then store a negate index of it in stack
                else stack.push(-(i+1));
            }
        }
        // If stack is not empty, then some un-matching parenthesis are present
        // Delete all the characters from result string at positions from stack
        while(!stack.empty()) sb.deleteCharAt(Math.abs(stack.pop())-1);
        
        return sb.toString();
    }
}
