// When i = 7, stack = [7 (73)]. ans[i] = 0.
// When i = 6, stack = [6 (76)]. ans[i] = 0.
// When i = 5, stack = [5 (72), 6 (76)]. ans[i] = 1.
// When i = 4, stack = [4 (69), 5 (72), 6 (76)]. ans[i] = 1.
// When i = 3, stack = [3 (71), 5 (72), 6 (76)]. ans[i] = 2.
// When i = 2, stack = [2 (75), 6 (76)]. ans[i] = 4.
// When i = 1, stack = [1 (74), 2 (75), 6 (76)]. ans[i] = 1.
// When i = 0, stack = [0 (73), 1 (74), 2 (75), 6 (76)]. ans[i] = 1.


//Stack Solution
// class Solution {
//     public int[] dailyTemperatures(int[] T) {
//         int[] ans = new int[T.length];
//         Stack<Integer> stack = new Stack();
//         for (int i = T.length - 1; i >= 0; --i) {
//             while (!stack.isEmpty() && T[i] >= T[stack.peek()]) stack.pop();
//             ans[i] = stack.isEmpty() ? 0 : stack.peek() - i;
//             stack.push(i);
//         }
//         return ans;
//     }
// }

//array solution 
class Solution {
public int[] dailyTemperatures(int[] temperatures) {
    int[] stack = new int[temperatures.length];
    int top = -1;
    int[] ret = new int[temperatures.length];
    for(int i = 0; i < temperatures.length; i++) {
        while(top > -1 && temperatures[i] > temperatures[stack[top]]) {
            int idx = stack[top--];
            ret[idx] = i - idx;
        }
        stack[++top] = i;
    }
    return ret;
}
}
