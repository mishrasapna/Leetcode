/*
You are given two integer arrays nums1 and nums2 both of unique elements, where nums1 is a subset of nums2.
Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, return -1 for this number.

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
*/

class Solution {
    public int[] nextGreaterElement(int[] findNums, int[] nums2) {
        
        // Map to store the elements of findNums array with its next greater element from nums2
        Map<Integer, Integer> map = new HashMap<>();
        
        // To temp store a sequence of decreasing order of elements
        Stack<Integer> stack = new Stack<>();
        for (int curr : nums2) {
            // Check if current element is greater than elements stored in stack
            while (!stack.isEmpty() && stack.peek() < curr)
                // Then pop every element in stack to store in map as key
                // with current element as value
                map.put(stack.pop(), curr);
            // else push current element in stack
            stack.push(curr);
        }   
        for (int i = 0; i < findNums.length; i++)
            findNums[i] = map.getOrDefault(findNums[i], -1);
        return findNums;
    }
}